#- name: Download workflow artifact
#  uses: dawidd6/action-download-artifact@v2.23.0
#
#
# This is a basic workflow that is manually triggered

name: Staging simulation

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      sha:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Commit sha'
        # Input has to be provided for the workflow to run
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Generate the changelog for this staging deployment from the commit history between this deployment
  # and the current production deployment, which is identified by its SHA stored in a deployment artifact
  changelog:
    runs-on: ubuntu-latest
    steps:
      # Download the artifact, from the last production deployment, which contains the SHA for that deployment
      - name: 'Download workflow artifact'
        uses: dawidd6/action-download-artifact@v2.23.0
        with:
          workflow: prod.yml            #this is the name of the production deployment github action
          name: prod-deployment-sha     #this is the name of the artifact within that action run
          if_no_artifact_found: warn    #don't want to fail a deployment if no artifact found, so warn

      # Read the value from the downloaded artifact into a variable, fail if no file found, but don't
      # fail the job.
      - name: 'Set variables'
        continue-on-error: true
        run: |
            if [ -f prod-deployment-sha.txt ]; then
              SHA=$(cat prod-deployment-sha.txt)
              echo "DEPLOYSHA=$SHA" >> $GITHUB_ENV
            else
              exit 1
            fi

      # Checkout the repo in order to run a git revision history command on it in the next step
#      - name: Checkout
#        uses: actions/checkout@v3
#        with:
#          fetch-depth: 0 #this is required to ensure that the necessary history is pulled down

      # Generate the changelog between the two SHAs, production deployment and current deployment
      # If no production sha is supplied, then notify so a manual generation can be performed
      - name: 'Show changelog'
        run: scripts/git/changelog.sh ${{ env.DEPLOYSHA }} ${{ github.event.inputs.sha }}